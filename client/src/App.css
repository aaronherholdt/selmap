import React, { useState, useEffect } from 'react';
import './App.css';
import { MapContainer, TileLayer, GeoJSON } from 'react-leaflet';
import { LatLngBounds } from 'leaflet';
import 'leaflet/dist/leaflet.css';

const App = () => {
  const [usStatesData, setUsStatesData] = useState([]);
  const [selectedStates, setSelectedStates] = useState([]);
  const [activeState, setActiveState] = useState(null);
  const MAX_SELECTIONS = 5;
  const [selectedOption, setSelectedOption] = useState({});
  const [showReflection, setShowReflection] = useState(false);
  const [reflections, setReflections] = useState({});
  const [scores, setScores] = useState({});
  const [currentDecisionState, setCurrentDecisionState] = useState(null);
  const [showDecisionView, setShowDecisionView] = useState(false);
  const [showFinalScores, setShowFinalScores] = useState(false);
  const [showIntro, setShowIntro] = useState(true);
  const [userScore, setUserScore] = useState(0);
  const [hoveredState, setHoveredState] = useState(null);
  const [statesConfirmed, setStatesConfirmed] = useState(false);
  const [stateCompletion, setStateCompletion] = useState({});
  const [confirmedDecisions, setConfirmedDecisions] = useState({});

  // Only the 10 problem states
  const problemStates = {
    'California': {
      challenge: 'Economic Inequality',
      description: 'Rising costs of living and wage gaps are creating social division.'
    },
    'Texas': {
      challenge: 'Education Access',
      description: 'Rural areas lack adequate educational resources.'
    },
    'New York': {
      challenge: 'Environmental Issues',
      description: 'Urban pollution and climate change impacts affecting communities.'
    },
    'Florida': {
      challenge: 'Healthcare Access',
      description: 'Growing elderly population struggling with healthcare accessibility.'
    },
    'Illinois': {
      challenge: 'Public Transportation',
      description: 'Inadequate public transit systems affecting job accessibility.'
    },
    'Michigan': {
      challenge: 'Job Training',
      description: 'Workers need new skills for emerging industries.'
    },
    'Ohio': {
      challenge: 'Housing Crisis',
      description: 'Affordable housing shortage affecting families.'
    },
    'Georgia': {
      challenge: 'Digital Divide',
      description: 'Unequal access to internet and technology resources.'
    },
    'Washington': {
      challenge: 'Mental Health',
      description: 'Limited access to mental health services and support.'
    },
    'Colorado': {
      challenge: 'Water Resources',
      description: 'Managing water scarcity and distribution.'
    }
  };

  // Add decision options for all problem states
  const stateDecisions = {
    'California': {
      options: [
        {
          title: "Option 1",
          description: "Implement progressive taxation",
          stakeholders: {
            citizens: "Lower income families benefit from increased services",
            businesses: "May face higher tax burden",
            government: "Increased revenue for social programs"
          },
          outcome: "Reduced economic inequality but potential business resistance"
        },
        {
          title: "Option 2",
          description: "Focus on job training programs",
          stakeholders: {
            citizens: "Improved job prospects",
            businesses: "Access to skilled workforce",
            government: "Initial investment required"
          },
          outcome: "Long-term economic growth but delayed impact"
        },
        {
          title: "Option 3",
          description: "Public-private partnership",
          stakeholders: {
            citizens: "Mixed benefits depending on program success",
            businesses: "Tax incentives for participation",
            government: "Shared cost burden"
          },
          outcome: "Balanced approach with moderate impact"
        }
      ]
    },
    'Texas': {
      options: [
        {
          title: "Option 1",
          description: "Increase education funding",
          stakeholders: {
            citizens: "Better access to quality education",
            businesses: "Higher taxes to support funding",
            government: "Budget reallocation needed"
          },
          outcome: "Improved education access but increased costs"
        },
        {
          title: "Option 2",
          description: "Digital learning initiative",
          stakeholders: {
            citizens: "Flexible learning options",
            businesses: "New EdTech opportunities",
            government: "Infrastructure investment required"
          },
          outcome: "Modern education solution with technology challenges"
        },
        {
          title: "Option 3",
          description: "Public-private school partnerships",
          stakeholders: {
            citizens: "More school choices",
            businesses: "Investment opportunities",
            government: "Shared responsibility"
          },
          outcome: "Diverse education options with complex management"
        }
      ]
    },
    'Florida': {
      options: [
        {
          title: "Option 1",
          description: "Expand Medicare coverage",
          stakeholders: {
            citizens: "Better healthcare access",
            businesses: "Insurance cost impacts",
            government: "Increased healthcare spending"
          },
          outcome: "Improved healthcare access with budget implications"
        },
        {
          title: "Option 2",
          description: "Telemedicine expansion",
          stakeholders: {
            citizens: "Remote healthcare access",
            businesses: "New healthcare delivery options",
            government: "Digital infrastructure needs"
          },
          outcome: "Increased accessibility with technology adoption challenges"
        },
        {
          title: "Option 3",
          description: "Community health centers",
          stakeholders: {
            citizens: "Local healthcare options",
            businesses: "Local healthcare partnerships",
            government: "Distributed healthcare system"
          },
          outcome: "Better local access with implementation complexity"
        }
      ]
    },
    'New York': {
      options: [
        {
          title: "Option 1",
          description: "Green energy transition",
          stakeholders: {
            citizens: "Cleaner environment",
            businesses: "Adaptation costs",
            government: "Environmental policy changes"
          },
          outcome: "Environmental improvements with economic adjustments"
        },
        {
          title: "Option 2",
          description: "Public transport expansion",
          stakeholders: {
            citizens: "Better mobility",
            businesses: "Changed commuter patterns",
            government: "Infrastructure investment"
          },
          outcome: "Reduced emissions with high initial costs"
        },
        {
          title: "Option 3",
          description: "Building efficiency programs",
          stakeholders: {
            citizens: "Lower utility costs",
            businesses: "Renovation requirements",
            government: "Incentive program management"
          },
          outcome: "Energy savings with implementation challenges"
        }
      ]
    },
    'Illinois': {
      options: [
        {
          title: "Option 1",
          description: "Transit modernization",
          stakeholders: {
            citizens: "Improved commute times",
            businesses: "Better workforce access",
            government: "Major infrastructure investment"
          },
          outcome: "Better mobility with significant costs"
        },
        {
          title: "Option 2",
          description: "Regional transit integration",
          stakeholders: {
            citizens: "Seamless regional travel",
            businesses: "Expanded market access",
            government: "Complex coordination needed"
          },
          outcome: "Enhanced connectivity with administrative challenges"
        },
        {
          title: "Option 3",
          description: "Smart transit solutions",
          stakeholders: {
            citizens: "Real-time transit info",
            businesses: "Tech integration opportunities",
            government: "Digital infrastructure needs"
          },
          outcome: "Modern transit system with tech adoption challenges"
        }
      ]
    },
    'Michigan': {
      options: [
        {
          title: "Option 1",
          description: "Industry retraining program",
          stakeholders: {
            citizens: "New career opportunities",
            businesses: "Skilled workforce availability",
            government: "Training program costs"
          },
          outcome: "Improved employment prospects with initial investment period"
        },
        {
          title: "Option 2",
          description: "Technology sector incentives",
          stakeholders: {
            citizens: "High-tech job opportunities",
            businesses: "Tax benefits for new industries",
            government: "Revenue adjustments needed"
          },
          outcome: "Economic diversification but delayed returns"
        },
        {
          title: "Option 3",
          description: "Small business support",
          stakeholders: {
            citizens: "Local job creation",
            businesses: "Growth assistance",
            government: "Support program administration"
          },
          outcome: "Balanced local growth with moderate impact"
        }
      ]
    },
    'Ohio': {
      options: [
        {
          title: "Option 1",
          description: "Housing subsidy program",
          stakeholders: {
            citizens: "Increased housing accessibility",
            businesses: "Construction sector growth",
            government: "Subsidy program costs"
          },
          outcome: "Better housing access but budget impact"
        },
        {
          title: "Option 2",
          description: "Urban renewal initiative",
          stakeholders: {
            citizens: "Improved neighborhoods",
            businesses: "Development opportunities",
            government: "Infrastructure investment"
          },
          outcome: "Community improvement with long-term benefits"
        },
        {
          title: "Option 3",
          description: "Mixed-income development",
          stakeholders: {
            citizens: "Diverse housing options",
            businesses: "Retail opportunities",
            government: "Zoning management"
          },
          outcome: "Balanced community development"
        }
      ]
    },
    'Georgia': {
      options: [
        {
          title: "Option 1",
          description: "Rural broadband expansion",
          stakeholders: {
            citizens: "Better internet access",
            businesses: "Expanded market reach",
            government: "Infrastructure costs"
          },
          outcome: "Improved connectivity with significant investment"
        },
        {
          title: "Option 2",
          description: "Digital literacy programs",
          stakeholders: {
            citizens: "Enhanced tech skills",
            businesses: "Skilled workforce",
            government: "Program administration"
          },
          outcome: "Better digital inclusion but requires ongoing support"
        },
        {
          title: "Option 3",
          description: "Tech hub development",
          stakeholders: {
            citizens: "Job opportunities",
            businesses: "Innovation ecosystem",
            government: "Development coordination"
          },
          outcome: "Economic growth with urban-rural divide challenges"
        }
      ]
    },
    'Washington': {
      options: [
        {
          title: "Option 1",
          description: "Mental health facilities",
          stakeholders: {
            citizens: "Better care access",
            businesses: "Healthcare sector growth",
            government: "Facility management"
          },
          outcome: "Improved mental health services with ongoing costs"
        },
        {
          title: "Option 2",
          description: "Telehealth expansion",
          stakeholders: {
            citizens: "Remote care access",
            businesses: "Digital health opportunities",
            government: "Regulatory oversight"
          },
          outcome: "Wider service reach with technology adoption challenges"
        },
        {
          title: "Option 3",
          description: "Community care centers",
          stakeholders: {
            citizens: "Local support access",
            businesses: "Service partnerships",
            government: "Distributed care management"
          },
          outcome: "Better local support with coordination needs"
        }
      ]
    },
    'Colorado': {
      options: [
        {
          title: "Option 1",
          description: "Water conservation program",
          stakeholders: {
            citizens: "Sustainable water access",
            businesses: "Usage restrictions",
            government: "Program enforcement"
          },
          outcome: "Better resource management with adaptation period"
        },
        {
          title: "Option 2",
          description: "Infrastructure modernization",
          stakeholders: {
            citizens: "Improved water delivery",
            businesses: "Construction opportunities",
            government: "Major investment needed"
          },
          outcome: "Long-term efficiency with high initial costs"
        },
        {
          title: "Option 3",
          description: "Water rights reform",
          stakeholders: {
            citizens: "Fair access policies",
            businesses: "Usage adjustments",
            government: "Policy administration"
          },
          outcome: "Equitable distribution with stakeholder challenges"
        }
      ]
    }
  };

  const emotions = {
    stakeholders: [
      { emoji: "😡", label: "Angry", score: 1, description: "Strong negative reaction" },
      { emoji: "😤", label: "Frustrated", score: 2, description: "Feeling blocked or hindered" },
      { emoji: "😟", label: "Worried", score: 3, description: "Concerned about impacts" },
      { emoji: "😕", label: "Confused", score: 4, description: "Unsure about changes" },
      { emoji: "😐", label: "Neutral", score: 5, description: "Neither positive nor negative" },
      { emoji: "🤔", label: "Thoughtful", score: 6, description: "Considering implications" },
      { emoji: "🙂", label: "Optimistic", score: 7, description: "Positive about changes" },
      { emoji: "😊", label: "Happy", score: 8, description: "Pleased with decision" },
      { emoji: "🤝", label: "Cooperative", score: 9, description: "Ready to work together" },
      { emoji: "🌟", label: "Inspired", score: 10, description: "Excited about possibilities" }
    ],
    personal: [
      { emoji: "😰", label: "Overwhelmed", score: 1, description: "Finding decision too difficult" },
      { emoji: "😣", label: "Pressured", score: 2, description: "Feeling stressed about choice" },
      { emoji: "😬", label: "Uncertain", score: 3, description: "Not fully confident" },
      { emoji: "🤨", label: "Skeptical", score: 4, description: "Questioning impact" },
      { emoji: "😐", label: "Reserved", score: 5, description: "Taking neutral stance" },
      { emoji: "🤔", label: "Analytical", score: 6, description: "Thinking carefully" },
      { emoji: "🤗", label: "Caring", score: 7, description: "Considering others" },
      { emoji: "😌", label: "Confident", score: 8, description: "Sure about decision" },
      { emoji: "💪", label: "Empowered", score: 9, description: "Ready to act" },
      { emoji: "🦸", label: "Leadership", score: 10, description: "Taking responsibility" }
    ]
  };

  // Add correct emotion mappings
  const correctEmotions = {
    citizens: {
      'Education Access': '😟', // Worried
      'Water Resources': '😤', // Frustrated
      'Economic Inequality': '😡', // Angry
      'Digital Divide': '😕', // Confused
      'Healthcare Access': '😰', // Overwhelmed
    },
    businesses: {
      'Education Access': '🤔', // Thoughtful
      'Water Resources': '😤', // Frustrated
      'Economic Inequality': '😐', // Neutral
      'Digital Divide': '🤝', // Cooperative
      'Healthcare Access': '🙂', // Optimistic
    },
    government: {
      'Education Access': '💪', // Empowered
      'Water Resources': '😬', // Uncertain
      'Economic Inequality': '😌', // Confident
      'Digital Divide': '🤗', // Caring
      'Healthcare Access': '🦸', // Leadership
    }
  };

  useEffect(() => {
    fetch(`${process.env.PUBLIC_URL}/geojson/usa/states.json`)
          .then(response => {
            if (!response.ok) {
          throw new Error('Failed to load states data');
            }
            return response.json();
          })
          .then(data => {
        // Filter out Hawaii if present
        const validData = data.features.filter(feature => 
          feature.properties.NAME !== 'Hawaii'
        );
      setUsStatesData(validData);
    })
    .catch(err => {
        console.error('Error loading GeoJSON file:', err);
    });
  }, []);

  const getStateStyle = (feature) => {
    const stateName = feature.properties.NAME;
    
    // Only style problem states
    if (!problemStates[stateName]) {
      return {
        fillOpacity: 0,
        stroke: false,
        interactive: false
      };
    }
    
    // If state is selected, show as blue
    if (selectedStates.includes(stateName)) {
      return {
        color: '#2563eb',
        weight: 3,
        fillColor: '#3b82f6',
        fillOpacity: 0.8,
        cursor: 'pointer'
      };
    }
    
    // If state is available but not selected, show as orange
      return {
        color: '#FF0000',
        weight: activeState === stateName ? 4 : 3,
        fillColor: '#FF9800',
        fillOpacity: activeState === stateName ? 0.8 : 0.6,
      cursor: selectedStates.length >= MAX_SELECTIONS ? 'not-allowed' : 'pointer'
    };
  };

  const handleStateClick = (stateName) => {
    if (statesConfirmed) return; // Prevent changes after confirmation
    
    setSelectedStates(prev => {
      // If state is already selected, remove it
      if (prev.includes(stateName)) {
        return prev.filter(s => s !== stateName);
      }
      
      // If trying to add a new state
      if (prev.length >= MAX_SELECTIONS) {
        alert(`You can only select ${MAX_SELECTIONS} states. Please remove a state before adding another.`);
        return prev;
      }
      
      // Add the new state
      return [...prev, stateName];
    });
    
    setHoveredState(null);
  };

  const handleSelectState = () => {
    if (!activeState || statesConfirmed) return;
    
    setSelectedStates(prev => {
      // If already selected, do nothing
      if (prev.includes(activeState)) {
        return prev;
      }
      
      // If at limit, show message
      if (prev.length >= MAX_SELECTIONS) {
        alert(`You can only select ${MAX_SELECTIONS} states. Please remove a state before adding another.`);
        return prev;
      }
      
      // Add the new state
      return [...prev, activeState];
    });
    
    setActiveState(null);
  };

  const onEachFeature = (feature, layer) => {
    const stateName = feature.properties.NAME;
    
    // Only add interactions for problem states
    if (!problemStates[stateName]) {
      return;
    }
    
    layer.on({
      click: () => {
        // If state is not selected and we're at the limit, show alert
        if (!selectedStates.includes(stateName) && selectedStates.length >= MAX_SELECTIONS) {
          alert(`You can only select ${MAX_SELECTIONS} states. Please remove a state before adding another.`);
          return;
        }
        handleStateClick(stateName);
      },
      mouseover: (e) => {
        // Don't show hover effects for non-selectable states
        if (selectedStates.length >= MAX_SELECTIONS && !selectedStates.includes(stateName)) {
          return;
        }
        const pos = e.originalEvent;
        setHoveredState({
          name: stateName,
          challenge: problemStates[stateName].challenge,
          description: problemStates[stateName].description,
          x: pos.clientX,
          y: pos.clientY
        });
        setActiveState(stateName);
      },
      mouseout: () => {
        setHoveredState(null);
        setActiveState(null);
      }
    });
  };

  const handleOptionSelect = (stateName, option) => {
    // Clear any previous options for this state and set the new one
    setSelectedOption({
      ...selectedOption,
      [stateName]: option
    });
    
    // Show reflection panel after option is selected
    setShowReflection(true);
  };

  // Add hint system
  const getHints = (stateName, score) => {
    const hints = {};
    if (score < 10) {
      hints.improvement = "Consider how different stakeholders might have varying perspectives.";
      if (!reflections[stateName]?.citizens) {
        hints.citizens = "Think about how citizens might be affected.";
      }
      if (!reflections[stateName]?.businesses) {
        hints.businesses = "Consider the impact on local businesses.";
      }
      if (!reflections[stateName]?.government) {
        hints.government = "Reflect on governmental responsibilities.";
      }
    }
    return hints;
  };

  // Modify handleEmotionSelect to remove emotionFeedback setting
  const handleEmotionSelect = (stateName, stakeholder, emotion) => {
    if (stateCompletion[stateName]?.completed) return;
    
    setReflections(prev => ({
        ...prev,
        [stateName]: {
          ...prev[stateName],
          [stakeholder]: emotion
        }
    }));
  };

  // Expand the feedback messages to be more specific
  const getFeedbackMessage = (stakeholder, challenge, isCorrect) => {
    const feedbackMessages = {
      citizens: {
        'Education Access': {
          correct: "Yes! Citizens would be worried (😟) about limited educational opportunities, as this directly affects their children's future.",
          incorrect: "Think about parents in rural areas - they would be worried about their children's limited access to quality education, not feeling this emotion."
        },
        'Water Resources': {
          correct: "Correct! Citizens are frustrated (😤) by water scarcity affecting their daily lives.",
          incorrect: "Consider how water shortages directly impact families' daily activities - this would cause frustration rather than your chosen emotion."
        },
        'Economic Inequality': {
          correct: "Right! Citizens are angry (😡) about the growing wealth gap and its impact on their lives.",
          incorrect: "When facing rising costs and stagnant wages, citizens typically feel anger rather than your selected emotion."
        }
      },
      businesses: {
        'Education Access': {
          correct: "Yes! Businesses are thoughtful (🤔) about workforce development and future employee skills.",
          incorrect: "Businesses need skilled workers - they would be thoughtful about education's role in workforce development, not feeling this emotion."
        },
        'Water Resources': {
          correct: "Exactly! Businesses are frustrated (😤) by resource limitations affecting operations.",
          incorrect: "Water restrictions impact business operations significantly - they would feel frustrated rather than your chosen emotion."
        },
        'Economic Inequality': {
          correct: "Correct! Businesses remain neutral (😐) while balancing profit with social responsibility.",
          incorrect: "Businesses typically maintain neutrality on economic inequality while managing both profits and community relations."
        }
      },
      government: {
        'Education Access': {
          correct: "Perfect! Government feels empowered (💪) to implement systemic educational changes.",
          incorrect: "The government has the power to improve education access - they would feel empowered to make changes, not this emotion."
        },
        'Water Resources': {
          correct: "Yes! Government feels uncertain (😬) about balancing different stakeholder needs.",
          incorrect: "Managing water resources involves complex trade-offs - government would feel uncertainty rather than your selected emotion."
        },
        'Economic Inequality': {
          correct: "Right! Government is confident (😌) in their ability to implement policy solutions.",
          incorrect: "With policy tools at their disposal, government would feel confident about addressing inequality, not this emotion."
        }
      }
    };

    return feedbackMessages[stakeholder]?.[challenge]?.[isCorrect ? 'correct' : 'incorrect'] ||
           (isCorrect ? 
             `Good choice! This emotion accurately reflects ${stakeholder}'s perspective.` : 
             `Consider how ${stakeholder} would be directly impacted by this issue - their emotional response would likely be different.`);
  };

  const ReflectionPanel = ({ stateName }) => (
    <div className="reflection-panel">
      <h3>Reflect on Your Decision</h3>
      
      <div className="selected-option-summary">
        <h4>Your Selected Option:</h4>
        <div className="option-summary">
          <p><strong>{selectedOption[stateName]?.title}</strong></p>
          <p>{selectedOption[stateName]?.description}</p>
        </div>
      </div>
      
      <div className="reflection-section">
        <h4>How do you think each group feels about this decision?</h4>
        
        <div className="stakeholder-emotions">
          {['citizens', 'businesses', 'government'].map(stakeholder => (
            <div key={stakeholder} className="stakeholder-group">
              <div className="stakeholder-header">
              <h5>{stakeholder.charAt(0).toUpperCase() + stakeholder.slice(1)}</h5>
                <div className="stakeholder-impact">
                  Impact: {selectedOption[stateName]?.stakeholders[stakeholder]}
                </div>
              </div>
              <div className="emotion-grid">
                {emotions.stakeholders.map(emotion => (
                  <button
                    key={emotion.label}
                    className={`emotion-btn 
                      ${reflections[stateName]?.[stakeholder] === emotion.emoji ? 'selected' : ''}
                      ${stateCompletion[stateName]?.completed && 
                        reflections[stateName]?.[stakeholder] === emotion.emoji ? 
                          (correctEmotions[stakeholder][problemStates[stateName].challenge] === emotion.emoji ? 
                            'correct' : 'incorrect') : ''}`
                    }
                    onClick={() => handleEmotionSelect(stateName, stakeholder, emotion.emoji)}
                    disabled={stateCompletion[stateName]?.completed}
                    title={`${emotion.label}: ${emotion.description}`}
                  >
                    {emotion.emoji}
                  </button>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>

      <div className="reflection-section">
        <h4>How do you feel about making this decision?</h4>
        <div className="emotion-grid">
          {emotions.personal.map(emotion => (
            <button
              key={emotion.label}
              className={`emotion-btn ${reflections[stateName]?.personal === emotion.emoji ? 'selected' : ''}`}
              onClick={() => handleEmotionSelect(stateName, 'personal', emotion.emoji)}
              disabled={stateCompletion[stateName]?.completed}
              title={`${emotion.label}: ${emotion.description}`}
            >
              {emotion.emoji}
            </button>
          ))}
        </div>
      </div>

      {!stateCompletion[stateName]?.completed ? (
      <button 
          className="confirm-emotions-btn"
          onClick={() => handleConfirmEmotions(stateName)}
        disabled={!reflections[stateName]?.citizens || 
                 !reflections[stateName]?.businesses || 
                 !reflections[stateName]?.government || 
                 !reflections[stateName]?.personal}
        >
          Review Choices
        </button>
      ) : (
        <div className="feedback-summary">
          <h4>Feedback on Your Choices:</h4>
          {['citizens', 'businesses', 'government'].map(stakeholder => (
            <div key={stakeholder} className="stakeholder-feedback">
              <h5>{stakeholder.charAt(0).toUpperCase() + stakeholder.slice(1)}:</h5>
              <p className={correctEmotions[stakeholder][problemStates[stateName].challenge] === 
                           reflections[stateName][stakeholder] ? 'correct' : 'incorrect'}>
                {getFeedbackMessage(
                  stakeholder, 
                  problemStates[stateName].challenge, 
                  correctEmotions[stakeholder][problemStates[stateName].challenge] === 
                  reflections[stateName][stakeholder]
                )}
              </p>
            </div>
          ))}
          <button 
            className="continue-btn"
            onClick={() => setShowReflection(false)}
      >
        Continue
      </button>
        </div>
      )}
    </div>
  );

  // First, let's add a function to handle decision confirmation
  const handleConfirmDecision = (stateName) => {
    setConfirmedDecisions(prev => ({
      ...prev,
      [stateName]: true
    }));
  };

  // Modify the option card rendering
  const renderOptionCard = (option, index, stateName) => {
    const isSelected = selectedOption[stateName] === option;
    const isDisabled = selectedOption[stateName] && !isSelected;

    return (
      <div 
        key={`${stateName}-${index}`} 
        className={`option-card ${isSelected ? 'selected' : ''} ${isDisabled ? 'disabled' : ''}`}
        style={{
          border: isSelected ? '2px solid #2563eb' : '1px solid #e2e8f0',
          backgroundColor: isSelected ? '#f0f7ff' : 
                          isDisabled ? '#f1f1f1' : '#f8fafc',
          opacity: isDisabled ? 0.6 : 1,
          position: 'relative'
        }}
      >
        {isDisabled && (
          <div 
            style={{
              position: 'absolute',
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              backgroundColor: 'rgba(0,0,0,0.1)',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              zIndex: 1
            }}
          >
            <span style={{ color: '#666', fontWeight: 'bold' }}>Option Unavailable</span>
          </div>
        )}
      <h4>{option.title}</h4>
      <p>{option.description}</p>
      <h5>Impact on Stakeholders:</h5>
      <ul>
        <li><strong>Citizens:</strong> {option.stakeholders.citizens}</li>
        <li><strong>Businesses:</strong> {option.stakeholders.businesses}</li>
        <li><strong>Government:</strong> {option.stakeholders.government}</li>
      </ul>
      <button 
        className="select-option-btn"
          onClick={() => {
            handleOptionSelect(stateName, option);
            handleConfirmDecision(stateName);
          }}
          disabled={isDisabled || confirmedDecisions[stateName]}
          style={{
            backgroundColor: isSelected ? '#1d4ed8' : '#2563eb',
            opacity: isDisabled || confirmedDecisions[stateName] ? 0.5 : 1,
            cursor: isDisabled || confirmedDecisions[stateName] ? 'not-allowed' : 'pointer'
          }}
        >
          {isSelected ? 'Selected' : 'Choose This Option'}
      </button>
    </div>
  );
  };

  const handleMakeDecision = (stateName) => {
    // Add check before accessing state
    if (problemStates[stateName]) {
    setCurrentDecisionState(stateName);
    setShowDecisionView(true);
    }
  };

  const handleBack = () => {
    if (showReflection) {
      setShowReflection(false);
    } else if (currentDecisionState) {
      setCurrentDecisionState(null);
      setShowDecisionView(false);
    }
  };

  // Modify handleFinalize for gentler revision suggestions
  const handleFinalize = () => {
    if (areAllStatesComplete()) {
      const finalScores = {};
      let totalUserScore = 0;

      selectedStates.forEach(stateName => {
        const stateScore = calculateScore(stateName);
        finalScores[stateName] = {
          score: stateScore,
          hints: getHints(stateName, stateScore)
        };
        totalUserScore += stateScore;
      });

      setScores(finalScores);
      setUserScore(Math.round(totalUserScore / selectedStates.length));
      setShowFinalScores(true);
    }
  };

  const DecisionView = () => (
    <div className="decision-view">
      <div className="decision-header">
        <button className="back-btn" onClick={handleBack}>
          ← Back to States
        </button>
        <h2>{currentDecisionState}</h2>
      </div>

      {!showReflection ? (
        <div className="state-decision-container">
          <h3>{problemStates[currentDecisionState].challenge}</h3>
          <p>{problemStates[currentDecisionState].description}</p>
          <div className="options-container">
            {stateDecisions[currentDecisionState].options.map((option, index) => 
              renderOptionCard(option, index, currentDecisionState)
            )}
          </div>
        </div>
      ) : (
        <div className="reflection-container">
          <ReflectionPanel stateName={currentDecisionState} />
        </div>
      )}
    </div>
  );

  const FinalScoresView = () => {
    const totalEmotions = selectedStates.length * 3; // 3 stakeholders per state
    const correctEmotionsCount = Object.values(scores).reduce((acc, score) => {
      return acc + (score?.correctEmotions || 0);
    }, 0);

    return (
      <div className="final-review-container">
        <h2>Decision Making Review</h2>
        
        <div className="overall-stats">
          <div className="stat-card">
            <h3>Overall Performance</h3>
            <div className="score-breakdown">
              <div className="final-score-section">
                <span className="score-label">Average Score:</span>
                <span className="final-score">{userScore}/10</span>
              </div>
              <div className="emotion-accuracy-section">
                <span className="accuracy-label">Emotional Intelligence:</span>
                <span className="emotion-accuracy">
                  {correctEmotionsCount}/{totalEmotions} correct emotions
                </span>
                <div className="accuracy-percentage">
                  ({Math.round((correctEmotionsCount/totalEmotions) * 100)}% accuracy)
                </div>
              </div>
            </div>
          </div>
        </div>

        <div className="states-review">
          {selectedStates.map((stateName, index) => (
            <div key={`selected-${stateName}-${index}`} className="state-review-card">
              <div className="state-review-header">
                <h3>{stateName}</h3>
                <div className="state-score-badge">
                  Score: {scores[stateName]?.score || 0}/10
                </div>
              </div>
              
              <div className="challenge-section">
                <h4>Challenge: {problemStates[stateName].challenge}</h4>
                <p>{problemStates[stateName].description}</p>
              </div>

              <div className="decision-section">
                <h4>Your Decision:</h4>
                <div className="selected-option-box">
                  <p className="option-title">{selectedOption[stateName]?.title}</p>
                  <p className="option-description">{selectedOption[stateName]?.description}</p>
                </div>
              </div>
              
              <div className="stakeholder-responses">
                <h4>Stakeholder Emotional Responses</h4>
                {['citizens', 'businesses', 'government'].map(stakeholder => (
                  <div key={stakeholder} className="stakeholder-review">
                    <div className="stakeholder-header">
                      <h5>{stakeholder.charAt(0).toUpperCase() + stakeholder.slice(1)}</h5>
                      <div className="emotion-result">
                        {correctEmotions[stakeholder][problemStates[stateName].challenge] === 
                         reflections[stateName]?.[stakeholder] ? '✓' : '✗'}
                      </div>
                    </div>
                    <div className="emotion-comparison">
                      <div className="your-choice">
                        Your choice: {reflections[stateName]?.[stakeholder]}
                      </div>
                      <div className="correct-choice">
                        Expected: {correctEmotions[stakeholder][problemStates[stateName].challenge]}
                      </div>
                    </div>
                    <p className={`feedback ${correctEmotions[stakeholder][problemStates[stateName].challenge] === 
                                reflections[stateName]?.[stakeholder] ? 'correct' : 'incorrect'}`}>
                      {getFeedbackMessage(
                        stakeholder,
                        problemStates[stateName].challenge,
                        correctEmotions[stakeholder][problemStates[stateName].challenge] === 
                        reflections[stateName]?.[stakeholder]
                      )}
                    </p>
          </div>
        ))}
      </div>
      </div>
          ))}
        </div>

        <button className="restart-btn" onClick={() => window.location.reload()}>
          Start New Game
        </button>
    </div>
  );
  };

  const calculateScore = (stateName) => {
    const stateReflections = reflections[stateName];
    if (!stateReflections) return 0;

    // Calculate score based on emotional intelligence choices
    let score = 0;
    const stakeholders = ['citizens', 'businesses', 'government'];
    
    stakeholders.forEach(stakeholder => {
      if (stateReflections[stakeholder]) {
        // Add points for each appropriate stakeholder emotion
        score += 2; // Base points for making a choice
      }
    });

    if (stateReflections.personal) {
      score += 4; // Points for personal reflection
    }

    return Math.min(10, score); // Cap at 10 points
  };

  const IntroScreen = () => (
    <div className="intro-screen">
      <div className="intro-header">
        <div className="animated-title">
          <h1>
            <span className="emoji-bounce">🎓</span>
            Presidential Decision Maker
            <span className="emoji-bounce">🌟</span>
          </h1>
          <p className="subtitle">Your Journey to Becoming a Master Decision Maker!</p>
        </div>
      </div>

      <div className="intro-content">
        <div className="mission-card">
          <div className="card-header">
            <span className="emoji-pulse"></span>
            <h2>Your Epic Mission</h2>
          </div>
          <p>
            Get ready to step into the shoes of a presidential advisor! 
            You'll tackle real challenges, make big decisions, and see how 
            your choices shape the future of different states.
          </p>
        </div>

        <div className="adventure-steps">
          <h2>Your Adventure Path <span className="emoji-walk">🚶‍♂️</span></h2>
          <div className="steps-container">
            <div className="step-card">
              <div className="step-number">1</div>
              <span className="emoji-float">🗺️</span>
              <h3>Choose Your States</h3>
              <p>Pick 5 states that need your help!</p>
            </div>

            <div className="step-card">
              <div className="step-number">2</div>
              <span className="emoji-float">🤔</span>
              <h3>Solve Challenges</h3>
              <p>Face exciting problems and find solutions!</p>
            </div>

            <div className="step-card">
              <div className="step-number">3</div>
              <span className="emoji-float">❤️</span>
              <h3>Show Empathy</h3>
              <p>Understand how people feel!</p>
            </div>

            <div className="step-card">
              <div className="step-number">4</div>
              <span className="emoji-float">🏆</span>
              <h3>Earn Points</h3>
              <p>Become an emotion expert!</p>
            </div>
          </div>
        </div>

        <div className="superpowers-section">
          <h2>Superpowers You'll Gain! <span className="emoji-pulse">💪</span></h2>
          <div className="superpowers-grid">
            <div className="superpower-card">
              <span className="emoji-spin">🤝</span>
              <h3>People Power</h3>
              <p>Understand different viewpoints</p>
            </div>
            <div className="superpower-card">
              <span className="emoji-spin">🧠</span>
              <h3>Smart Thinking</h3>
              <p>Solve tricky problems</p>
            </div>
            <div className="superpower-card">
              <span className="emoji-spin">❤️</span>
              <h3>Heart Skills</h3>
              <p>Feel what others feel</p>
            </div>
            <div className="superpower-card">
              <span className="emoji-spin">🎯</span>
              <h3>Decision Master</h3>
              <p>Make awesome choices</p>
            </div>
          </div>
        </div>

        <button 
          className="start-adventure-btn"
          onClick={() => setShowIntro(false)}
        >
          <span className="btn-text">Start Your Adventure!</span>
          <span className="emoji-bounce">🚀</span>
        </button>
      </div>
    </div>
  );

  const ScoreDisplay = () => (
    <div className="score-banner">
      <div className="stars">{'⭐'.repeat(Math.floor(userScore/20))}</div>
      <div className="score">Score: {userScore}</div>
      </div>
  );

  const canMakeDecisions = () => {
    return selectedStates.length >= 5;
  };

  // Add confirmation handler
  const handleConfirmStates = () => {
    if (selectedStates.length === MAX_SELECTIONS) {
      setStatesConfirmed(true);
    }
  };

  const areAllStatesComplete = () => {
    return selectedStates.every(state => stateCompletion[state]?.completed);
  };

  // Modify the scoring calculation in handleConfirmEmotions
  const handleConfirmEmotions = (stateName) => {
    if (reflections[stateName]?.citizens && 
        reflections[stateName]?.businesses && 
        reflections[stateName]?.government && 
        reflections[stateName]?.personal) {
      
      const challenge = problemStates[stateName].challenge;
      let correctCount = 0;
      
      // Check each stakeholder's emotion
      ['citizens', 'businesses', 'government'].forEach(stakeholder => {
        if (correctEmotions[stakeholder][challenge] === reflections[stateName][stakeholder]) {
          correctCount++;
        }
      });

      // Scoring system:
      // - Each correct stakeholder emotion: 3 points (max 9)
      // - Personal reflection: 1 point
      // Total possible per state: 10 points
      const stateScore = (correctCount * 3) + (reflections[stateName].personal ? 1 : 0);
      
      setScores(prev => ({
        ...prev,
        [stateName]: {
          score: stateScore,
          correctEmotions: correctCount,
          totalEmotions: 3
        }
      }));

      setStateCompletion(prev => ({
        ...prev,
        [stateName]: {
          completed: true,
          score: stateScore
        }
      }));

      // Update total user score as an average of all completed states
      setUserScore(prev => {
        const allStateScores = Object.values(scores)
          .filter(s => s?.score !== undefined)
          .map(s => s.score);
        allStateScores.push(stateScore); // Include current state
        return Math.round(allStateScores.reduce((a, b) => a + b, 0) / allStateScores.length);
      });
    }
  };

  return (
    <div className="App">
      {showIntro ? (
        <IntroScreen />
      ) : (
        !showDecisionView && !showFinalScores && (
          <>
            <div className="header">
              <h1>Presidential Decision Making</h1>
              <div className="selection-counter" role="status" aria-live="polite">
                States Selected: {selectedStates.length} / {MAX_SELECTIONS}
              </div>
            </div>

            <div className="map-container">
              <MapContainer
                center={[39.8283, -98.5795]}
                zoom={4}
                style={{ height: "600px", width: "100%" }}
                scrollWheelZoom={false}
                maxBounds={new LatLngBounds(
                  [24.396308, -125.0],
                  [49.384358, -66.93457]
                )}
                maxBoundsViscosity={1.0}
              >
                <TileLayer
                  url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                  attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                />
                {usStatesData.map((stateData, index) => (
                  <GeoJSON
                    key={`state-${index}`}
                    data={stateData}
                    style={getStateStyle}
                    onEachFeature={onEachFeature}
                  />
                ))}
              </MapContainer>

              <div className="map-legend">
                <h3>Legend</h3>
                <div className="legend-item">
                  <span className="legend-color" style={{backgroundColor: '#FF9800'}}></span>
                  <span>Available States</span>
                </div>
                <div className="legend-item">
                  <span className="legend-color" style={{backgroundColor: '#3b82f6'}}></span>
                  <span>Selected States</span>
                </div>
              </div>
            </div>

            {selectedStates.length > 0 && (
              <div className="selected-states-grid">
                {selectedStates.map((stateName, index) => (
                  <div key={`selected-${stateName}`} className="state-card">
                    <div className="state-card-header">
                    <h3>{stateName}</h3>
                      <div className="state-status">
                        {stateCompletion[stateName]?.completed && (
                          <div className="completion-badge">
                            ✓ Completed
                            <div className="state-score">
                              Score: {scores[stateName]?.score || 0}/10
                            </div>
                          </div>
                        )}
                        <button 
                          className="remove-state-btn"
                          onClick={() => handleStateClick(stateName)}
                          disabled={statesConfirmed}
                          style={{
                            opacity: statesConfirmed ? 0.5 : 1,
                            cursor: statesConfirmed ? 'not-allowed' : 'pointer'
                          }}
                        >
                          ✕
                        </button>
                      </div>
                    </div>
                    <p>{problemStates[stateName].challenge}</p>
                    <button 
                      className="make-decision-btn"
                      onClick={() => handleMakeDecision(stateName)}
                      disabled={!statesConfirmed || stateCompletion[stateName]?.completed}
                      style={{
                        opacity: (!statesConfirmed || stateCompletion[stateName]?.completed) ? 0.5 : 1,
                        cursor: (!statesConfirmed || stateCompletion[stateName]?.completed) ? 'not-allowed' : 'pointer'
                      }}
                    >
                      {!statesConfirmed ? 'Confirm States First' : 
                       stateCompletion[stateName]?.completed ? 'Completed' : 
                       'Make Decision'}
                    </button>
                  </div>
                ))}
                
                {selectedStates.length === MAX_SELECTIONS && !statesConfirmed && (
                  <div className="confirmation-container">
                    <button 
                      className="confirm-states-btn"
                      onClick={handleConfirmStates}
                      aria-label="Confirm selected states"
                    >
                      Confirm State Choices
                    </button>
                    <p className="confirmation-note">
                      Note: Once confirmed, you cannot change your state selections
                    </p>
                  </div>
                )}

                {statesConfirmed && (
                  <button 
                    className="finalize-btn"
                    onClick={handleFinalize}
                    aria-label="Review all decisions"
                  >
                    Review All Decisions
                  </button>
                )}
              </div>
            )}
          </>
        )
      )}

      {showDecisionView && <DecisionView />}
      {showFinalScores && <FinalScoresView />}

      {activeState && problemStates[activeState] && !selectedStates.includes(activeState) && (
        <div className="state-panel">
          <h2>{activeState}</h2>
          <h3>{problemStates[activeState]?.challenge}</h3>
          <p>{problemStates[activeState]?.description}</p>
          <button 
            onClick={handleSelectState}
            disabled={selectedStates.length >= MAX_SELECTIONS}
            className={selectedStates.length >= MAX_SELECTIONS ? 'disabled' : ''}
          >
            {selectedStates.length >= MAX_SELECTIONS ? 
              'Maximum States Selected' : 
              'Select This State'}
          </button>
        </div>
      )}

      <ScoreDisplay />

      {hoveredState && (
        <div 
          className="state-popup"
          style={{
            position: 'fixed',
            left: `${hoveredState.x + 10}px`,
            top: `${hoveredState.y + 10}px`,
            backgroundColor: 'white',
            border: '1px solid black',
            padding: '10px',
            zIndex: 9999,
            borderRadius: '4px',
            boxShadow: '0 2px 4px rgba(0,0,0,0.2)',
            minWidth: '200px'
          }}
        >
          <h4>{hoveredState.name}</h4>
          <h5>{hoveredState.challenge}</h5>
          <p>{hoveredState.description}</p>
        </div>
      )}

      {!canMakeDecisions() && (
        <div className="requirement-message">
          Please select at least 5 states to begin making decisions
        </div>
      )}

      {canMakeDecisions() && (
        <div className="decision-buttons">
          {/* Your decision-related buttons/components */}
        </div>
      )}
    </div>
  );
};

export default App; 
